// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userBasicFieldNames          = builder.RawFieldNames(&UserBasic{})
	userBasicRows                = strings.Join(userBasicFieldNames, ",")
	userBasicRowsExpectAutoSet   = strings.Join(stringx.Remove(userBasicFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	userBasicRowsWithPlaceHolder = strings.Join(stringx.Remove(userBasicFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"

	cacheUserBasicIdPrefix    = "cache:userBasic:id:"
	cacheUserBasicEmailPrefix = "cache:userBasic:email:"
	cacheUserBasicNamePrefix  = "cache:userBasic:name:"
)

type (
	userBasicModel interface {
		Insert(ctx context.Context, data *UserBasic) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserBasic, error)
		FindOneByEmail(ctx context.Context, email sql.NullString) (*UserBasic, error)
		FindOneByName(ctx context.Context, name string) (*UserBasic, error)
		Update(ctx context.Context, data *UserBasic) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserBasicModel struct {
		sqlc.CachedConn
		table string
	}

	UserBasic struct {
		Id          int64          `db:"id"`
		Name        string         `db:"name"`
		Password    string         `db:"password"`
		Email       sql.NullString `db:"email"`
		NowVolume   int64          `db:"now_volume"`   // 当前存储容量
		TotalVolume int64          `db:"total_volume"` // 最大存储容量
		CreateTime  time.Time      `db:"create_time"`
		UpdateTime  time.Time      `db:"update_time"`
	}
)

func newUserBasicModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserBasicModel {
	return &defaultUserBasicModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_basic`",
	}
}

func (m *defaultUserBasicModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userBasicEmailKey := fmt.Sprintf("%s%v", cacheUserBasicEmailPrefix, data.Email)
	userBasicIdKey := fmt.Sprintf("%s%v", cacheUserBasicIdPrefix, id)
	userBasicNameKey := fmt.Sprintf("%s%v", cacheUserBasicNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userBasicEmailKey, userBasicIdKey, userBasicNameKey)
	return err
}

func (m *defaultUserBasicModel) FindOne(ctx context.Context, id int64) (*UserBasic, error) {
	userBasicIdKey := fmt.Sprintf("%s%v", cacheUserBasicIdPrefix, id)
	var resp UserBasic
	err := m.QueryRowCtx(ctx, &resp, userBasicIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userBasicRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBasicModel) FindOneByEmail(ctx context.Context, email sql.NullString) (*UserBasic, error) {
	userBasicEmailKey := fmt.Sprintf("%s%v", cacheUserBasicEmailPrefix, email)
	var resp UserBasic
	err := m.QueryRowIndexCtx(ctx, &resp, userBasicEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userBasicRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBasicModel) FindOneByName(ctx context.Context, name string) (*UserBasic, error) {
	userBasicNameKey := fmt.Sprintf("%s%v", cacheUserBasicNamePrefix, name)
	var resp UserBasic
	err := m.QueryRowIndexCtx(ctx, &resp, userBasicNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", userBasicRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBasicModel) Insert(ctx context.Context, data *UserBasic) (sql.Result, error) {
	userBasicEmailKey := fmt.Sprintf("%s%v", cacheUserBasicEmailPrefix, data.Email)
	userBasicIdKey := fmt.Sprintf("%s%v", cacheUserBasicIdPrefix, data.Id)
	userBasicNameKey := fmt.Sprintf("%s%v", cacheUserBasicNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userBasicRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Password, data.Email, data.NowVolume, data.TotalVolume)
	}, userBasicEmailKey, userBasicIdKey, userBasicNameKey)
	return ret, err
}

func (m *defaultUserBasicModel) Update(ctx context.Context, newData *UserBasic) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userBasicEmailKey := fmt.Sprintf("%s%v", cacheUserBasicEmailPrefix, data.Email)
	userBasicIdKey := fmt.Sprintf("%s%v", cacheUserBasicIdPrefix, data.Id)
	userBasicNameKey := fmt.Sprintf("%s%v", cacheUserBasicNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userBasicRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Password, newData.Email, newData.NowVolume, newData.TotalVolume, newData.Id)
	}, userBasicEmailKey, userBasicIdKey, userBasicNameKey)
	return err
}

func (m *defaultUserBasicModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserBasicIdPrefix, primary)
}

func (m *defaultUserBasicModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userBasicRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserBasicModel) tableName() string {
	return m.table
}
