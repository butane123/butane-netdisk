// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	repositoryPoolFieldNames          = builder.RawFieldNames(&RepositoryPool{})
	repositoryPoolRows                = strings.Join(repositoryPoolFieldNames, ",")
	repositoryPoolRowsExpectAutoSet   = strings.Join(stringx.Remove(repositoryPoolFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	repositoryPoolRowsWithPlaceHolder = strings.Join(stringx.Remove(repositoryPoolFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheRepositoryPoolIdPrefix   = "cache:repositoryPool:id:"
	cacheRepositoryPoolHashPrefix = "cache:repositoryPool:hash:"
)

type (
	repositoryPoolModel interface {
		Insert(ctx context.Context, data *RepositoryPool) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RepositoryPool, error)
		FindOneByHash(ctx context.Context, hash string) (*RepositoryPool, error)
		Update(ctx context.Context, data *RepositoryPool) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRepositoryPoolModel struct {
		sqlc.CachedConn
		table string
	}

	RepositoryPool struct {
		Id         int64     `db:"id"`
		Hash       string    `db:"hash"` // 文件的唯一标识
		Ext        string    `db:"ext"`  // 文件扩展名
		Size       int64     `db:"size"` // 文件大小
		Path       string    `db:"path"` // 文件路径
		Name       string    `db:"name"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newRepositoryPoolModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRepositoryPoolModel {
	return &defaultRepositoryPoolModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`repository_pool`",
	}
}

func (m *defaultRepositoryPoolModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	repositoryPoolHashKey := fmt.Sprintf("%s%v", cacheRepositoryPoolHashPrefix, data.Hash)
	repositoryPoolIdKey := fmt.Sprintf("%s%v", cacheRepositoryPoolIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, repositoryPoolHashKey, repositoryPoolIdKey)
	return err
}

func (m *defaultRepositoryPoolModel) FindOne(ctx context.Context, id int64) (*RepositoryPool, error) {
	repositoryPoolIdKey := fmt.Sprintf("%s%v", cacheRepositoryPoolIdPrefix, id)
	var resp RepositoryPool
	err := m.QueryRowCtx(ctx, &resp, repositoryPoolIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", repositoryPoolRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRepositoryPoolModel) FindOneByHash(ctx context.Context, hash string) (*RepositoryPool, error) {
	repositoryPoolHashKey := fmt.Sprintf("%s%v", cacheRepositoryPoolHashPrefix, hash)
	var resp RepositoryPool
	err := m.QueryRowIndexCtx(ctx, &resp, repositoryPoolHashKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `hash` = ? limit 1", repositoryPoolRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, hash); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRepositoryPoolModel) Insert(ctx context.Context, data *RepositoryPool) (sql.Result, error) {
	repositoryPoolHashKey := fmt.Sprintf("%s%v", cacheRepositoryPoolHashPrefix, data.Hash)
	repositoryPoolIdKey := fmt.Sprintf("%s%v", cacheRepositoryPoolIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, repositoryPoolRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Hash, data.Ext, data.Size, data.Path, data.Name)
	}, repositoryPoolHashKey, repositoryPoolIdKey)
	return ret, err
}

func (m *defaultRepositoryPoolModel) Update(ctx context.Context, newData *RepositoryPool) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	repositoryPoolHashKey := fmt.Sprintf("%s%v", cacheRepositoryPoolHashPrefix, data.Hash)
	repositoryPoolIdKey := fmt.Sprintf("%s%v", cacheRepositoryPoolIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, repositoryPoolRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Hash, newData.Ext, newData.Size, newData.Path, newData.Name, newData.Id)
	}, repositoryPoolHashKey, repositoryPoolIdKey)
	return err
}

func (m *defaultRepositoryPoolModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRepositoryPoolIdPrefix, primary)
}

func (m *defaultRepositoryPoolModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", repositoryPoolRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRepositoryPoolModel) tableName() string {
	return m.table
}
