// Code generated by goctl. DO NOT EDIT.
// Source: repository.proto

package repositoryclient

import (
	"context"

	"butane-netdisk/service/repository/rpc/types/repository"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteByIdReq  = repository.DeleteByIdReq
	DeleteByIdResp = repository.DeleteByIdResp
	RepositoryReq  = repository.RepositoryReq
	RepositoryResp = repository.RepositoryResp

	Repository interface {
		GetRepositoryPoolByRepositoryId(ctx context.Context, in *RepositoryReq, opts ...grpc.CallOption) (*RepositoryResp, error)
		DeleteById(ctx context.Context, in *DeleteByIdReq, opts ...grpc.CallOption) (*DeleteByIdResp, error)
	}

	defaultRepository struct {
		cli zrpc.Client
	}
)

func NewRepository(cli zrpc.Client) Repository {
	return &defaultRepository{
		cli: cli,
	}
}

func (m *defaultRepository) GetRepositoryPoolByRepositoryId(ctx context.Context, in *RepositoryReq, opts ...grpc.CallOption) (*RepositoryResp, error) {
	client := repository.NewRepositoryClient(m.cli.Conn())
	return client.GetRepositoryPoolByRepositoryId(ctx, in, opts...)
}

func (m *defaultRepository) DeleteById(ctx context.Context, in *DeleteByIdReq, opts ...grpc.CallOption) (*DeleteByIdResp, error) {
	client := repository.NewRepositoryClient(m.cli.Conn())
	return client.DeleteById(ctx, in, opts...)
}
