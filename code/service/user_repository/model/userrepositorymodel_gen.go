// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRepositoryFieldNames          = builder.RawFieldNames(&UserRepository{})
	userRepositoryRows                = strings.Join(userRepositoryFieldNames, ",")
	userRepositoryRowsExpectAutoSet   = strings.Join(stringx.Remove(userRepositoryFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	userRepositoryRowsWithPlaceHolder = strings.Join(stringx.Remove(userRepositoryFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"

	cacheUserRepositoryIdPrefix = "cache:userRepository:id:"
)

type (
	userRepositoryModel interface {
		Insert(ctx context.Context, data *UserRepository) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserRepository, error)
		Update(ctx context.Context, data *UserRepository) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserRepositoryModel struct {
		sqlc.CachedConn
		table string
	}

	UserRepository struct {
		Id           int64     `db:"id"`
		UserId       int64     `db:"user_id"`
		ParentId     int64     `db:"parent_id"`
		RepositoryId int64     `db:"repository_id"` // 0则为文件夹
		Name         string    `db:"name"`
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
	}
)

func newUserRepositoryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserRepositoryModel {
	return &defaultUserRepositoryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_repository`",
	}
}

func (m *defaultUserRepositoryModel) Delete(ctx context.Context, id int64) error {
	userRepositoryIdKey := fmt.Sprintf("%s%v", cacheUserRepositoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userRepositoryIdKey)
	return err
}

func (m *defaultUserRepositoryModel) FindOne(ctx context.Context, id int64) (*UserRepository, error) {
	userRepositoryIdKey := fmt.Sprintf("%s%v", cacheUserRepositoryIdPrefix, id)
	var resp UserRepository
	err := m.QueryRowCtx(ctx, &resp, userRepositoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRepositoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRepositoryModel) Insert(ctx context.Context, data *UserRepository) (sql.Result, error) {
	userRepositoryIdKey := fmt.Sprintf("%s%v", cacheUserRepositoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userRepositoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ParentId, data.RepositoryId, data.Name)
	}, userRepositoryIdKey)
	return ret, err
}

func (m *defaultUserRepositoryModel) Update(ctx context.Context, data *UserRepository) error {
	userRepositoryIdKey := fmt.Sprintf("%s%v", cacheUserRepositoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRepositoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ParentId, data.RepositoryId, data.Name, data.Id)
	}, userRepositoryIdKey)
	return err
}

func (m *defaultUserRepositoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserRepositoryIdPrefix, primary)
}

func (m *defaultUserRepositoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRepositoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserRepositoryModel) tableName() string {
	return m.table
}
