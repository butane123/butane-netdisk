// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: userRepository.proto

package userRepository

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRepositoryClient is the client API for UserRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRepositoryClient interface {
	GetUserRepositoryNameByRepositoryId(ctx context.Context, in *RepositoryIdReq, opts ...grpc.CallOption) (*UserRepositoryNameReply, error)
	FindRepositoryIdentityByIdentity(ctx context.Context, in *FindRepositoryIdReq, opts ...grpc.CallOption) (*FindRepositoryIdReply, error)
	CreateByShare(ctx context.Context, in *CreateByShareReq, opts ...grpc.CallOption) (*CreateByShareReply, error)
}

type userRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRepositoryClient(cc grpc.ClientConnInterface) UserRepositoryClient {
	return &userRepositoryClient{cc}
}

func (c *userRepositoryClient) GetUserRepositoryNameByRepositoryId(ctx context.Context, in *RepositoryIdReq, opts ...grpc.CallOption) (*UserRepositoryNameReply, error) {
	out := new(UserRepositoryNameReply)
	err := c.cc.Invoke(ctx, "/userRepository.userRepository/getUserRepositoryNameByRepositoryId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepositoryClient) FindRepositoryIdentityByIdentity(ctx context.Context, in *FindRepositoryIdReq, opts ...grpc.CallOption) (*FindRepositoryIdReply, error) {
	out := new(FindRepositoryIdReply)
	err := c.cc.Invoke(ctx, "/userRepository.userRepository/findRepositoryIdentityByIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepositoryClient) CreateByShare(ctx context.Context, in *CreateByShareReq, opts ...grpc.CallOption) (*CreateByShareReply, error) {
	out := new(CreateByShareReply)
	err := c.cc.Invoke(ctx, "/userRepository.userRepository/createByShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRepositoryServer is the server API for UserRepository service.
// All implementations must embed UnimplementedUserRepositoryServer
// for forward compatibility
type UserRepositoryServer interface {
	GetUserRepositoryNameByRepositoryId(context.Context, *RepositoryIdReq) (*UserRepositoryNameReply, error)
	FindRepositoryIdentityByIdentity(context.Context, *FindRepositoryIdReq) (*FindRepositoryIdReply, error)
	CreateByShare(context.Context, *CreateByShareReq) (*CreateByShareReply, error)
	mustEmbedUnimplementedUserRepositoryServer()
}

// UnimplementedUserRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedUserRepositoryServer struct {
}

func (UnimplementedUserRepositoryServer) GetUserRepositoryNameByRepositoryId(context.Context, *RepositoryIdReq) (*UserRepositoryNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRepositoryNameByRepositoryId not implemented")
}
func (UnimplementedUserRepositoryServer) FindRepositoryIdentityByIdentity(context.Context, *FindRepositoryIdReq) (*FindRepositoryIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRepositoryIdentityByIdentity not implemented")
}
func (UnimplementedUserRepositoryServer) CreateByShare(context.Context, *CreateByShareReq) (*CreateByShareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateByShare not implemented")
}
func (UnimplementedUserRepositoryServer) mustEmbedUnimplementedUserRepositoryServer() {}

// UnsafeUserRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRepositoryServer will
// result in compilation errors.
type UnsafeUserRepositoryServer interface {
	mustEmbedUnimplementedUserRepositoryServer()
}

func RegisterUserRepositoryServer(s grpc.ServiceRegistrar, srv UserRepositoryServer) {
	s.RegisterService(&UserRepository_ServiceDesc, srv)
}

func _UserRepository_GetUserRepositoryNameByRepositoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryServer).GetUserRepositoryNameByRepositoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userRepository.userRepository/getUserRepositoryNameByRepositoryId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryServer).GetUserRepositoryNameByRepositoryId(ctx, req.(*RepositoryIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepository_FindRepositoryIdentityByIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRepositoryIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryServer).FindRepositoryIdentityByIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userRepository.userRepository/findRepositoryIdentityByIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryServer).FindRepositoryIdentityByIdentity(ctx, req.(*FindRepositoryIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepository_CreateByShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateByShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryServer).CreateByShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userRepository.userRepository/createByShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryServer).CreateByShare(ctx, req.(*CreateByShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRepository_ServiceDesc is the grpc.ServiceDesc for UserRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userRepository.userRepository",
	HandlerType: (*UserRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUserRepositoryNameByRepositoryId",
			Handler:    _UserRepository_GetUserRepositoryNameByRepositoryId_Handler,
		},
		{
			MethodName: "findRepositoryIdentityByIdentity",
			Handler:    _UserRepository_FindRepositoryIdentityByIdentity_Handler,
		},
		{
			MethodName: "createByShare",
			Handler:    _UserRepository_CreateByShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userRepository.proto",
}
