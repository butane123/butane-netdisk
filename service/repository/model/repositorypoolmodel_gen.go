// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	repositoryPoolFieldNames          = builder.RawFieldNames(&RepositoryPool{})
	repositoryPoolRows                = strings.Join(repositoryPoolFieldNames, ",")
	repositoryPoolRowsExpectAutoSet   = strings.Join(stringx.Remove(repositoryPoolFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	repositoryPoolRowsWithPlaceHolder = strings.Join(stringx.Remove(repositoryPoolFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"

	cacheRepositoryPoolIdPrefix = "cache:repositoryPool:id:"
)

type (
	repositoryPoolModel interface {
		Insert(ctx context.Context, data *RepositoryPool) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RepositoryPool, error)
		Update(ctx context.Context, data *RepositoryPool) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRepositoryPoolModel struct {
		sqlc.CachedConn
		table string
	}

	RepositoryPool struct {
		Id        int64          `db:"id"`
		Identity  sql.NullString `db:"identity"`
		Hash      sql.NullString `db:"hash"` // 文件的唯一标识
		Ext       sql.NullString `db:"ext"`  // 文件扩展名
		Size      sql.NullInt64  `db:"size"` // 文件大小
		Path      sql.NullString `db:"path"` // 文件路径
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
		DeletedAt sql.NullTime   `db:"deleted_at"`
	}
)

func newRepositoryPoolModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRepositoryPoolModel {
	return &defaultRepositoryPoolModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`repository_pool`",
	}
}

func (m *defaultRepositoryPoolModel) Delete(ctx context.Context, id int64) error {
	repositoryPoolIdKey := fmt.Sprintf("%s%v", cacheRepositoryPoolIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, repositoryPoolIdKey)
	return err
}

func (m *defaultRepositoryPoolModel) FindOne(ctx context.Context, id int64) (*RepositoryPool, error) {
	repositoryPoolIdKey := fmt.Sprintf("%s%v", cacheRepositoryPoolIdPrefix, id)
	var resp RepositoryPool
	err := m.QueryRowCtx(ctx, &resp, repositoryPoolIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", repositoryPoolRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRepositoryPoolModel) Insert(ctx context.Context, data *RepositoryPool) (sql.Result, error) {
	repositoryPoolIdKey := fmt.Sprintf("%s%v", cacheRepositoryPoolIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, repositoryPoolRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Identity, data.Hash, data.Ext, data.Size, data.Path, data.DeletedAt)
	}, repositoryPoolIdKey)
	return ret, err
}

func (m *defaultRepositoryPoolModel) Update(ctx context.Context, data *RepositoryPool) error {
	repositoryPoolIdKey := fmt.Sprintf("%s%v", cacheRepositoryPoolIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, repositoryPoolRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Identity, data.Hash, data.Ext, data.Size, data.Path, data.DeletedAt, data.Id)
	}, repositoryPoolIdKey)
	return err
}

func (m *defaultRepositoryPoolModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRepositoryPoolIdPrefix, primary)
}

func (m *defaultRepositoryPoolModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", repositoryPoolRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRepositoryPoolModel) tableName() string {
	return m.table
}
