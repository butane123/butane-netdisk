// Code generated by goctl. DO NOT EDIT.
// Source: repository.proto

package repositoryclient

import (
	"context"

	"cloud-disk/service/repository/rpc/repository"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteByIdentityReq  = repository.DeleteByIdentityReq
	DeleteByIdentityResp = repository.DeleteByIdentityResp
	RepositoryReq        = repository.RepositoryReq
	RepositoryResp       = repository.RepositoryResp

	Repository interface {
		GetRepositoryPoolByRepositoryId(ctx context.Context, in *RepositoryReq, opts ...grpc.CallOption) (*RepositoryResp, error)
		DeleteByIdentity(ctx context.Context, in *DeleteByIdentityReq, opts ...grpc.CallOption) (*DeleteByIdentityResp, error)
	}

	defaultRepository struct {
		cli zrpc.Client
	}
)

func NewRepository(cli zrpc.Client) Repository {
	return &defaultRepository{
		cli: cli,
	}
}

func (m *defaultRepository) GetRepositoryPoolByRepositoryId(ctx context.Context, in *RepositoryReq, opts ...grpc.CallOption) (*RepositoryResp, error) {
	client := repository.NewRepositoryClient(m.cli.Conn())
	return client.GetRepositoryPoolByRepositoryId(ctx, in, opts...)
}

func (m *defaultRepository) DeleteByIdentity(ctx context.Context, in *DeleteByIdentityReq, opts ...grpc.CallOption) (*DeleteByIdentityResp, error) {
	client := repository.NewRepositoryClient(m.cli.Conn())
	return client.DeleteByIdentity(ctx, in, opts...)
}
